// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Type type
// Example: all
//
// swagger:model type
type Type string

func NewType(value Type) *Type {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Type.
func (m Type) Pointer() *Type {
	return &m
}

const (

	// TypeAll captures enum value "all"
	TypeAll Type = "all"

	// TypeUser captures enum value "user"
	TypeUser Type = "user"

	// TypeNonLocalStrategy captures enum value "non_local_strategy"
	TypeNonLocalStrategy Type = "non_local_strategy"
)

// for schema
var typeEnum []interface{}

func init() {
	var res []Type
	if err := json.Unmarshal([]byte(`["all","user","non_local_strategy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typeEnum = append(typeEnum, v)
	}
}

func (m Type) validateTypeEnum(path, location string, value Type) error {
	if err := validate.EnumCase(path, location, value, typeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this type
func (m Type) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this type based on context it is used
func (m Type) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
